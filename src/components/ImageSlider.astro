---
interface Props {
  images: string[];
  arrowsNavigation?: boolean;
  dotsNavigation?: '' | 'after' | 'inner';
  transition?: '' | 'fade' | 'slide' | 'slide-y' | 'blur' | 'zoom';
  loop?: boolean;
  autoplay?: boolean;
  autoplayDuration?: number;
  autoplayProgressBar?: boolean;
}

const {
  images,
  arrowsNavigation = false,
  dotsNavigation = '',
  transition = '',
  loop = true,
  autoplay = true,
  autoplayDuration = 5000,
  autoplayProgressBar = true,
} = Astro.props;
---

<div class="bg-white dark:bg-gray-900 dark:text-gray-100">
  <div class="container mx-auto px-4 py-16 lg:px-8 lg:py-32 xl:max-w-7xl">
    <div class={`mx-auto w-full ${dotsNavigation === "inner" ? "pb-3" : ""}`}>
      <div
        class="group relative overflow-hidden rounded-xl ring-8 ring-gray-500/10 focus:outline-hidden focus-visible:ring-4 focus-visible:ring-blue-400/60 dark:ring-gray-500/25"
        tabindex="0"
        data-slider
      >
        <div
          class="aspect-16/10 w-full"
          role="region"
          aria-roledescription="carousel"
          aria-label="Image Slider"
        >
          {
            images.map((image, index) => (
              <img
                src={image}
                alt={`Image ${index + 1}`}
                class={`absolute left-0 top-0 h-full w-full object-cover ${
                  index === 0 ? 'z-1' : 'hidden'
                }`}
                data-slide={index}
                role="group"
                aria-roledescription="slide"
                aria-label={`Image slide ${index + 1} of ${images.length}`}
              />
            ))
          }
        </div>

        {
          arrowsNavigation && (
            <>
              <button
                type="button"
                class="group absolute top-1/2 left-5 z-10 flex size-10 -translate-y-1/2 items-center justify-center rounded-full bg-gray-900/50 text-white opacity-25 backdrop-blur-xs transition duration-150 ease-out group-hover:opacity-100 hover:scale-110 hover:bg-gray-900/90 active:scale-100 active:bg-gray-900/75 sm:size-12"
                aria-label="Previous Image Slide"
                data-prev
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  viewBox="0 0 20 20"
                  fill="currentColor"
                  class="hi-mini hi-chevron-left inline-block size-5"
                >
                  <path
                    fill-rule="evenodd"
                    d="M11.78 5.22a.75.75 0 0 1 0 1.06L8.06 10l3.72 3.72a.75.75 0 1 1-1.06 1.06l-4.25-4.25a.75.75 0 0 1 0-1.06l4.25-4.25a.75.75 0 0 1 1.06 0Z"
                    clip-rule="evenodd"
                  />
                </svg>
                <span class="sr-only">Previous</span>
              </button>
              <button
                type="button"
                class="group absolute top-1/2 right-5 z-10 flex size-10 -translate-y-1/2 items-center justify-center rounded-full bg-gray-900/50 text-white opacity-25 backdrop-blur-xs transition duration-150 ease-out group-hover:opacity-100 hover:scale-110 hover:bg-gray-900/90 active:scale-100 active:bg-gray-900/75 sm:size-12"
                aria-label="Next Image Slide"
                data-next
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  viewBox="0 0 20 20"
                  fill="currentColor"
                  class="hi-mini hi-chevron-right inline-block size-5"
                >
                  <path
                    fill-rule="evenodd"
                    d="M8.22 5.22a.75.75 0 0 1 1.06 0l4.25 4.25a.75.75 0 0 1 0 1.06l-4.25 4.25a.75.75 0 0 1-1.06-1.06L11.94 10 8.22 6.28a.75.75 0 0 1 0-1.06Z"
                    clip-rule="evenodd"
                  />
                </svg>
                <span class="sr-only">Next</span>
              </button>
            </>
          )
        }

        {
          autoplayProgressBar && (
            <div
              class="absolute inset-x-0 bottom-0 z-10 h-1.5 w-full overflow-hidden"
              role="progressbar"
              aria-valuemin="0"
              aria-valuemax="100"
              data-progress
            >
              <div class="h-full rounded-r-full bg-blue-500 transition-all duration-100 ease-linear" data-progress-bar />
            </div>
          )
        }
      </div>

      {
        dotsNavigation && (
          <div
            class={`flex justify-center gap-3 py-2 ${
              dotsNavigation === "inner" ? "relative z-10 -mt-14" : "mt-4"
            }`}
          >
            <div
              class={`inline-flex flex-wrap justify-center gap-3 rounded-xl border p-2 ${
                dotsNavigation === "inner"
                  ? "border-gray-800/50 bg-gray-900/40"
                  : "border-gray-100 bg-gray-50 dark:border-gray-600/40 dark:bg-gray-700/25"
              }`}
            >
              {images.map((_, index) => (
                <button
                  type="button"
                  data-dot={index}
                  class={`size-2.5 rounded-full ${
                    index === 0 && dotsNavigation === "inner"
                      ? "bg-white shadow-sm"
                      : ""
                  } ${
                    index !== 0 && dotsNavigation === "inner"
                      ? "bg-white/40 shadow-sm ring-white/25 hover:bg-white/90 hover:ring-4"
                      : ""
                  } ${
                    index === 0 && dotsNavigation === "after"
                      ? "bg-gray-700 dark:bg-gray-200"
                      : ""
                  } ${
                    index !== 0 && dotsNavigation === "after"
                      ? "bg-gray-300 ring-gray-200 hover:bg-gray-400 hover:ring-4 dark:bg-gray-700 dark:ring-gray-700 dark:hover:bg-gray-400"
                      : ""
                  }`}
                />
              ))}
            </div>
          </div>
        )
      }
    </div>
  </div>
</div>

<script define:vars={{ autoplay, autoplayDuration, loop, transition, autoplayProgressBar }}>
  const slider = document.querySelector('[data-slider]');
  const slides = [...document.querySelectorAll('[data-slide]')];
  const prevButton = document.querySelector('[data-prev]');
  const nextButton = document.querySelector('[data-next]');
  const dots = [...document.querySelectorAll('[data-dot]')];
  const progressBar = document.querySelector('[data-progress-bar]');

  let currentIndex = 0;
  let autoplayInterval;
  let progressInterval;

  function getImageClasses(index, isActive) {
    let classes = 'absolute left-0 top-0 h-full w-full object-cover ';
    
    if (transition) {
      classes += 'transition duration-300 ease-in-out will-change-auto ';
    }
    
    if (isActive) {
      classes += 'z-1 ';
    }
    
    if (!transition && !isActive) {
      classes += 'hidden ';
    }
    
    if ((transition === 'fade' || transition === 'blur') && isActive) {
      classes += 'opacity-100 ';
    }
    
    if (transition === 'fade' && !isActive) {
      classes += 'opacity-0 ';
    }
    
    if (transition === 'blur' && !isActive) {
      classes += 'blur-xl opacity-0 ';
    }
    
    if (transition === 'slide') {
      if (isActive) {
        classes += 'translate-x-0 ';
      } else if (currentIndex > index) {
        classes += '-translate-x-full ';
      } else {
        classes += 'translate-x-full ';
      }
    }
    
    if (transition === 'slide-y') {
      if (isActive) {
        classes += 'translate-y-0 ';
      } else if (currentIndex > index) {
        classes += '-translate-y-full ';
      } else {
        classes += 'translate-y-full ';
      }
    }
    
    if (transition === 'zoom') {
      if (isActive) {
        classes += 'scale-100 opacity-100 ';
      } else if (currentIndex > index) {
        classes += 'scale-50 opacity-0 ';
      } else {
        classes += 'scale-150 opacity-0 ';
      }
    }
    
    return classes.trim();
  }

  function updateSlides() {
    slides.forEach((slide, index) => {
      slide.className = getImageClasses(index, index === currentIndex);
      slide.setAttribute('aria-hidden', index !== currentIndex);
    });

    dots?.forEach((dot, index) => {
      if (index === currentIndex) {
        dot.classList.add('bg-white', 'shadow-sm');
        dot.classList.remove('bg-white/40');
      } else {
        dot.classList.remove('bg-white', 'shadow-sm');
        dot.classList.add('bg-white/40');
      }
    });
  }

  function next() {
    if (!loop && currentIndex === slides.length - 1) return;
    currentIndex = (currentIndex + 1) % slides.length;
    updateSlides();
    resetAutoplay();
  }

  function prev() {
    if (!loop && currentIndex === 0) return;
    currentIndex = (currentIndex - 1 + slides.length) % slides.length;
    updateSlides();
    resetAutoplay();
  }

  function resetAutoplay(restart = true) {
    if (!autoplay) return;

    clearInterval(autoplayInterval);
    clearInterval(progressInterval);

    if (progressBar) {
      progressBar.style.width = '0%';
    }

    if (restart) {
      startAutoplay();
    }
  }

  function startAutoplay() {
    if (!autoplay) return;

    autoplayInterval = setInterval(next, autoplayDuration);

    if (autoplayProgressBar && progressBar) {
      let progress = 0;
      progressInterval = setInterval(() => {
        progress += 100 / (autoplayDuration / 100);
        if (progress > 100) progress = 0;
        progressBar.style.width = `${progress}%`;
      }, 100);
    }
  }

  // Event listeners
  prevButton?.addEventListener('click', () => {
    prev();
    resetAutoplay();
  });

  nextButton?.addEventListener('click', () => {
    next();
    resetAutoplay();
  });

  dots?.forEach((dot, index) => {
    dot.addEventListener('click', () => {
      currentIndex = index;
      updateSlides();
      resetAutoplay();
    });
  });

  slider?.addEventListener('keyup', (e) => {
    if (e.key === 'ArrowRight') next();
    if (e.key === 'ArrowLeft') prev();
  });

  // Initialize
  updateSlides();
  startAutoplay();

  // Cleanup
  document.addEventListener('astro:before-swap', () => {
    clearInterval(autoplayInterval);
    clearInterval(progressInterval);
  });
</script> 