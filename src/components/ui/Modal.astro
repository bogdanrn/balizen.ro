---
export interface Props {
  id: string;
  title: string;
  content: string;
  confirmText?: string;
  cancelText?: string;
}

const {
  id,
  title,
  content,
  confirmText = "Confirm",
  cancelText = "AnuleazÄƒ"
} = Astro.props;
---

<div id={id} class="fixed inset-0 z-50 hidden items-center justify-center bg-black bg-opacity-50 backdrop-blur-sm">
  <div class="relative max-w-md w-full mx-4 bg-white dark:bg-gray-800 rounded-lg shadow-xl transform transition-all">
    <!-- Modal header -->
    <div class="flex items-center justify-between p-6 border-b border-gray-200 dark:border-gray-700">
      <h3 class="text-lg font-semibold text-gray-900 dark:text-white font-heading">
        {title}
      </h3>
      <button type="button" class="modal-close text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 transition-colors">
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    </div>
    
    <!-- Modal content -->
    <div class="p-6">
      <p class="text-gray-700 dark:text-gray-300 leading-relaxed" set:html={content}></p>
    </div>
    
    <!-- Modal footer -->
    <div class="flex items-center justify-end gap-3 p-6 border-t border-gray-200 dark:border-gray-700">
      <button type="button" class="modal-cancel px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 rounded-lg transition-colors">
        {cancelText}
      </button>
      <button type="button" class="modal-confirm px-4 py-2 text-sm font-medium text-white rounded-lg transition-colors hover:opacity-80" style="background-color: var(--aw-color-primary); color: var(--aw-color-text-default);">
        {confirmText}
      </button>
    </div>
  </div>
</div>

<script define:vars={{ id }}>
  document.addEventListener('DOMContentLoaded', function() {
    const modal = document.getElementById(id);
    if (!modal) return;
    
    const closeButtons = modal.querySelectorAll('.modal-close, .modal-cancel');
    const confirmButton = modal.querySelector('.modal-confirm');
    
    function hideModal() {
      modal.classList.add('hidden');
      modal.classList.remove('flex');
      document.body.classList.remove('overflow-hidden');
    }
    
    function showModal() {
      modal.classList.remove('hidden');
      modal.classList.add('flex');
      document.body.classList.add('overflow-hidden');
    }
    
    // Close modal events
    closeButtons.forEach(button => {
      button.addEventListener('click', hideModal);
    });
    
    // Close on backdrop click
    modal.addEventListener('click', function(e) {
      if (e.target === modal) {
        hideModal();
      }
    });
    
    // Close on Escape key
    document.addEventListener('keydown', function(e) {
      if (e.key === 'Escape' && !modal.classList.contains('hidden')) {
        hideModal();
      }
    });
    
    // Store references for external access
    window[`showModal_${modal.id}`] = showModal;
    window[`hideModal_${modal.id}`] = hideModal;
    
    // Confirm button event (will be handled externally)
    if (confirmButton) {
      confirmButton.addEventListener('click', function() {
        // Dispatch custom event for external handling
        const event = new CustomEvent('modalConfirm', {
          detail: { modalId: modal.id }
        });
        document.dispatchEvent(event);
        hideModal();
      });
    }
  });
</script> 